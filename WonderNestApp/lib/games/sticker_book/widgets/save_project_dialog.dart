import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import '../../../core/theme/app_colors.dart';
import '../models/sticker_models.dart';
import '../services/saved_projects_service.dart';

/// Dialog for saving sticker book projects with age-appropriate UI
class SaveProjectDialog extends StatefulWidget {
  final AgeMode ageMode;
  final String? suggestedName;
  final VoidCallback? onCancel;
  final Function(String projectName) onSave;
  
  const SaveProjectDialog({
    super.key,
    required this.ageMode,
    this.suggestedName,
    this.onCancel,
    required this.onSave,
  });
  
  @override
  State<SaveProjectDialog> createState() => _SaveProjectDialogState();
}

class _SaveProjectDialogState extends State<SaveProjectDialog>
    with SingleTickerProviderStateMixin {
  late TextEditingController _nameController;
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _fadeAnimation;
  
  bool _isLittleKid = false;
  bool _isSaving = false;
  String _autoGeneratedName = '';
  
  @override
  void initState() {
    super.initState();
    _isLittleKid = widget.ageMode == AgeMode.littleKid;
    
    // Generate auto name
    _generateAutoName();
    
    _nameController = TextEditingController(
      text: widget.suggestedName ?? _autoGeneratedName,
    );
    
    // Setup animations
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _scaleAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.elasticOut,
    );
    
    _fadeAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    );
    
    _animationController.forward();
  }
  
  @override
  void dispose() {
    _nameController.dispose();
    _animationController.dispose();
    super.dispose();
  }
  
  void _generateAutoName() async {
    final service = SavedProjectsService();
    try {
      await service.initialize();
      final autoName = await service.generateAutoName(widget.ageMode);
      setState(() {
        _autoGeneratedName = autoName;
        if (_nameController.text.isEmpty) {
          _nameController.text = autoName;
        }
      });
    } catch (e) {
      // Fallback names
      _autoGeneratedName = _isLittleKid ? 'My Fun Art' : 'My Creation';
      if (_nameController.text.isEmpty) {
        _nameController.text = _autoGeneratedName;
      }
    }
  }
  
  void _handleSave() async {
    if (_isSaving) return;
    
    setState(() {
      _isSaving = true;
    });
    
    final projectName = _nameController.text.trim();
    if (projectName.isEmpty) {
      _nameController.text = _autoGeneratedName;
    }
    
    // Add a small delay for better UX
    await Future.delayed(const Duration(milliseconds: 500));
    
    widget.onSave(_nameController.text.trim());
  }
  
  void _handleCancel() {
    _animationController.reverse().then((_) {
      widget.onCancel?.call();
    });
  }
  
  @override
  Widget build(BuildContext context) {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: FadeTransition(
        opacity: _fadeAnimation,
        child: AlertDialog(
          backgroundColor: Colors.transparent,
          content: Container(
            width: _isLittleKid ? 320 : 280,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(_isLittleKid ? 24 : 16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withValues(alpha: 0.2),
                  blurRadius: 20,
                  offset: const Offset(0, 8),
                ),
              ],
            ),
            child: Padding(
              padding: EdgeInsets.all(_isLittleKid ? 24 : 20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Title with fun icon
                  _buildTitle(),
                  
                  SizedBox(height: _isLittleKid ? 20 : 16),
                  
                  // Name input field
                  _buildNameInput(),
                  
                  if (_isLittleKid) ...[
                    const SizedBox(height: 16),
                    _buildAutoNameSuggestion(),
                  ],
                  
                  SizedBox(height: _isLittleKid ? 28 : 24),
                  
                  // Action buttons
                  _buildActionButtons(),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
  
  Widget _buildTitle() {
    return Row(
      children: [
        // Animated save icon
        Container(
          width: _isLittleKid ? 48 : 40,
          height: _isLittleKid ? 48 : 40,
          decoration: BoxDecoration(
            color: AppColors.kidBackgroundLight,
            borderRadius: BorderRadius.circular(_isLittleKid ? 12 : 8),
          ),
          child: Icon(
            Icons.save,
            color: Colors.blue[600],
            size: _isLittleKid ? 28 : 24,
          ),
        ).animate()
         .scale(delay: 200.ms, duration: 400.ms, curve: Curves.elasticOut)
         .shimmer(delay: 600.ms, duration: 1200.ms),
        
        const SizedBox(width: 12),
        
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                _isLittleKid ? 'Save Your Art!' : 'Save Your Creation',
                style: TextStyle(
                  fontSize: _isLittleKid ? 20 : 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey[800],
                ),
              ),
              if (_isLittleKid) ...[
                const SizedBox(height: 4),
                Text(
                  'Give your artwork a special name!',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ],
          ),
        ),
      ],
    );
  }
  
  Widget _buildNameInput() {
    return Container(
      decoration: BoxDecoration(
        color: _isLittleKid ? Colors.blue[50] : Colors.grey[50],
        borderRadius: BorderRadius.circular(_isLittleKid ? 16 : 12),
        border: Border.all(
          color: _isLittleKid ? Colors.blue[200]! : Colors.grey[300]!,
          width: _isLittleKid ? 2 : 1,
        ),
      ),
      child: TextField(
        controller: _nameController,
        style: TextStyle(
          fontSize: _isLittleKid ? 16 : 14,
          fontWeight: _isLittleKid ? FontWeight.w600 : FontWeight.normal,
        ),
        decoration: InputDecoration(
          hintText: _isLittleKid ? 'Type a name...' : 'Enter project name...',
          hintStyle: TextStyle(
            color: Colors.grey[500],
            fontSize: _isLittleKid ? 16 : 14,
          ),
          border: InputBorder.none,
          contentPadding: EdgeInsets.all(_isLittleKid ? 16 : 12),
          suffixIcon: _nameController.text.isNotEmpty
              ? IconButton(
                  onPressed: () {
                    _nameController.clear();
                    setState(() {});
                  },
                  icon: Icon(
                    Icons.clear,
                    color: Colors.grey[500],
                    size: _isLittleKid ? 24 : 20,
                  ),
                )
              : null,
        ),
        maxLength: _isLittleKid ? 20 : 30,
        buildCounter: (context, {required currentLength, required isFocused, maxLength}) {
          if (!_isLittleKid) return null;
          return null; // Hide counter for little kids
        },
        onChanged: (value) {
          setState(() {});
        },
      ),
    );
  }
  
  Widget _buildAutoNameSuggestion() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.purple[50],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.purple[200]!, width: 1),
      ),
      child: Row(
        children: [
          Icon(
            Icons.auto_awesome,
            color: Colors.purple[600],
            size: 20,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              'Need ideas? Try: "$_autoGeneratedName"',
              style: TextStyle(
                fontSize: 13,
                color: Colors.purple[700],
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          TextButton(
            onPressed: () {
              _nameController.text = _autoGeneratedName;
              setState(() {});
            },
            style: TextButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              minimumSize: Size.zero,
            ),
            child: Text(
              'Use This',
              style: TextStyle(
                fontSize: 12,
                color: Colors.purple[600],
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildActionButtons() {
    return Row(
      children: [
        // Cancel button
        Expanded(
          child: OutlinedButton(
            onPressed: _isSaving ? null : _handleCancel,
            style: OutlinedButton.styleFrom(
              padding: EdgeInsets.symmetric(
                vertical: _isLittleKid ? 16 : 12,
              ),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(_isLittleKid ? 16 : 12),
              ),
              side: BorderSide(
                color: Colors.grey[400]!,
                width: _isLittleKid ? 2 : 1,
              ),
            ),
            child: Text(
              _isLittleKid ? 'Not Now' : 'Cancel',
              style: TextStyle(
                fontSize: _isLittleKid ? 16 : 14,
                fontWeight: _isLittleKid ? FontWeight.bold : FontWeight.w600,
                color: Colors.grey[600],
              ),
            ),
          ),
        ),
        
        SizedBox(width: _isLittleKid ? 16 : 12),
        
        // Save button
        Expanded(
          child: ElevatedButton(
            onPressed: _isSaving ? null : _handleSave,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green[500],
              foregroundColor: Colors.white,
              elevation: _isLittleKid ? 4 : 2,
              padding: EdgeInsets.symmetric(
                vertical: _isLittleKid ? 16 : 12,
              ),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(_isLittleKid ? 16 : 12),
              ),
            ),
            child: _isSaving
                ? SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  )
                : Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.check,
                        size: _isLittleKid ? 20 : 16,
                      ),
                      const SizedBox(width: 8),
                      Text(
                        _isLittleKid ? 'Save It!' : 'Save',
                        style: TextStyle(
                          fontSize: _isLittleKid ? 16 : 14,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
          ),
        ),
      ],
    );
  }
}