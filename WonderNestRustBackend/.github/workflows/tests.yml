name: WonderNest Authentication Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  MIN_COVERAGE: 80

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run unit tests
      run: cargo test --lib unit --verbose
      env:
        RUST_LOG: debug

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: wondernest_app
          POSTGRES_PASSWORD: wondernest_secure_password_dev
          POSTGRES_DB: wondernest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for PostgreSQL
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5433 -U wondernest_app; do sleep 1; done'
    
    - name: Run database migrations
      run: |
        # This would run migrations if we had them set up
        # sqlx migrate run --database-url "postgresql://wondernest_app:wondernest_secure_password_dev@localhost:5433/wondernest_test"
        echo "Migrations would run here"
    
    - name: Run integration tests
      run: cargo test --test '*' integration --verbose -- --test-threads=1
      env:
        TEST_DATABASE_URL: postgresql://wondernest_app:wondernest_secure_password_dev@localhost:5433/wondernest_test
        RUST_LOG: info

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: wondernest_app
          POSTGRES_PASSWORD: wondernest_secure_password_dev
          POSTGRES_DB: wondernest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for PostgreSQL
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5433 -U wondernest_app; do sleep 1; done'
    
    - name: Run security tests
      run: cargo test --test '*' security --verbose -- --test-threads=1
      env:
        TEST_DATABASE_URL: postgresql://wondernest_app:wondernest_secure_password_dev@localhost:5433/wondernest_test
        RUST_LOG: warn
    
    - name: Run security audit
      run: |
        cargo install cargo-audit
        cargo audit

  coppa-compliance:
    name: COPPA Compliance Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: wondernest_app
          POSTGRES_PASSWORD: wondernest_secure_password_dev
          POSTGRES_DB: wondernest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for PostgreSQL
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5433 -U wondernest_app; do sleep 1; done'
    
    - name: Run COPPA compliance tests
      run: cargo test coppa --verbose -- --test-threads=1
      env:
        TEST_DATABASE_URL: postgresql://wondernest_app:wondernest_secure_password_dev@localhost:5433/wondernest_test
        RUST_LOG: info

  concurrency-tests:
    name: Concurrency Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: wondernest_app
          POSTGRES_PASSWORD: wondernest_secure_password_dev
          POSTGRES_DB: wondernest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for PostgreSQL
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5433 -U wondernest_app; do sleep 1; done'
    
    - name: Run concurrency tests
      run: cargo test concurrency --verbose
      env:
        TEST_DATABASE_URL: postgresql://wondernest_app:wondernest_secure_password_dev@localhost:5433/wondernest_test
        RUST_LOG: warn

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: wondernest_app
          POSTGRES_PASSWORD: wondernest_secure_password_dev
          POSTGRES_DB: wondernest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-tarpaulin
      run: |
        wget https://github.com/xd009642/tarpaulin/releases/latest/download/cargo-tarpaulin-x86_64-unknown-linux-musl.tar.gz
        tar -xzf cargo-tarpaulin-x86_64-unknown-linux-musl.tar.gz
        mv cargo-tarpaulin ~/.cargo/bin/
    
    - name: Wait for PostgreSQL
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5433 -U wondernest_app; do sleep 1; done'
    
    - name: Generate coverage report
      run: |
        cargo tarpaulin \
          --all-features \
          --workspace \
          --timeout 120 \
          --out Xml \
          --fail-under $MIN_COVERAGE
      env:
        TEST_DATABASE_URL: postgresql://wondernest_app:wondernest_secure_password_dev@localhost:5433/wondernest_test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        flags: unittests
        name: codecov-umbrella

  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: wondernest_app
          POSTGRES_PASSWORD: wondernest_secure_password_dev
          POSTGRES_DB: wondernest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-mutants-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-mutants
      run: cargo install cargo-mutants
    
    - name: Wait for PostgreSQL
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5433 -U wondernest_app; do sleep 1; done'
    
    - name: Run mutation testing
      run: |
        timeout 1200 cargo mutants \
          --timeout 60 \
          --dir src/services/auth_service.rs \
          || echo "Mutation testing completed with warnings"
      env:
        TEST_DATABASE_URL: postgresql://wondernest_app:wondernest_secure_password_dev@localhost:5433/wondernest_test

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security-tests, coppa-compliance, concurrency-tests, coverage]
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "## WonderNest Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| COPPA Compliance | ${{ needs.coppa-compliance.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Concurrency Tests | ${{ needs.concurrency-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Coverage | ${{ needs.coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.lint.result }}" != "success" || "${{ needs.unit-tests.result }}" != "success" || "${{ needs.integration-tests.result }}" != "success" || "${{ needs.security-tests.result }}" != "success" || "${{ needs.coppa-compliance.result }}" != "success" || "${{ needs.concurrency-tests.result }}" != "success" || "${{ needs.coverage.result }}" != "success" ]]; then
          echo "❌ Some tests failed. Please review the results above."
          exit 1
        else
          echo "✅ All tests passed successfully!"
        fi