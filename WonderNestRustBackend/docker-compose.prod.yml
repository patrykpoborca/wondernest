version: '3.8'

services:
  wondernest-rust-backend:
    build: .
    container_name: wondernest-rust-backend
    ports:
      - "8082:8082"
    environment:
      # Database configuration
      DATABASE_URL: postgresql://wondernest_app:${DB_PASSWORD}@postgres:5432/wondernest_prod
      DATABASE_MAX_CONNECTIONS: 20
      
      # Redis configuration  
      REDIS_URL: redis://redis:6379
      
      # Server configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8082
      
      # JWT configuration (use secure values in production)
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: wondernest-api
      JWT_AUDIENCE: wondernest-users
      JWT_EXPIRATION_HOURS: 1
      JWT_REFRESH_EXPIRATION_DAYS: 30
      
      # Logging
      RUST_LOG: wondernest_backend=info,tower_http=info,sqlx=warn
      
      # Environment
      RUST_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - wondernest-network

  postgres:
    image: postgres:16
    container_name: wondernest-postgres
    environment:
      POSTGRES_DB: wondernest_prod
      POSTGRES_USER: wondernest_app
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wondernest_app -d wondernest_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - wondernest-network

  redis:
    image: redis:7-alpine
    container_name: wondernest-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - wondernest-network

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: wondernest-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - wondernest-network

  grafana:
    image: grafana/grafana:latest
    container_name: wondernest-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    restart: unless-stopped
    networks:
      - wondernest-network

networks:
  wondernest-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local