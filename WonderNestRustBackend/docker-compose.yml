version: '3.8'

services:
  rust-backend:
    build: .
    container_name: wondernest-rust-backend
    ports:
      - "8082:8080"  # Using 8082 to avoid conflicts
    environment:
      - DATABASE_URL=postgresql://wondernest_app:wondernest_secure_password_dev@host.docker.internal:5433/wondernest_prod
      - REDIS_URL=redis://host.docker.internal:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - RUST_LOG=debug
      - RUST_ENV=development
      - STORAGE_PROVIDER=minio
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=wondernest-dev
      - MINIO_REGION=us-east-1
    depends_on:
      - postgres
      - redis
    networks:
      - wondernest-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  postgres:
    image: postgres:16
    container_name: wondernest-postgres-rust
    environment:
      - POSTGRES_DB=wondernest_prod
      - POSTGRES_USER=wondernest_app
      - POSTGRES_PASSWORD=wondernest_secure_password_dev
    ports:
      - "5434:5432"  # Using 5434 to avoid conflict
    volumes:
      - postgres-data-rust:/var/lib/postgresql/data
    networks:
      - wondernest-network

  redis:
    image: redis:7-alpine
    container_name: wondernest-redis-rust
    ports:
      - "6380:6379"  # Using 6380 to avoid conflict
    networks:
      - wondernest-network

  minio:
    image: minio/minio
    container_name: wondernest-minio
    ports:
      - "9000:9000"  # S3 API port
      - "9001:9001"  # MinIO Console port
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    networks:
      - wondernest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

networks:
  wondernest-network:
    driver: bridge

volumes:
  postgres-data-rust:
  minio-data: